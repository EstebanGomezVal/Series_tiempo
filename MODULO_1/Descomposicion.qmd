---
title: "Descomposicion"
author: "Esteban Gomez"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(fpp3)
```

La funcion 'model()' sirve para ajustar uno o mas modelos a la(s) serie(s) de tiempo. Nos devuelve una tabla de modelos ('mable').

```{r}
tasmania <- tourism |> 
  filter(State == "Tasmania",
         Region == "East Coast")

tasmania
```

```{r}
tasmania |> 
  model(classical_decomposition(Trips, type = "additive")) |>
  components() |> 
  autoplot() +
  theme(legend.position = "bottom")
```

```{r}
tasmania |> 
  model(classical_decomposition(Trips, type = "additive")) |>
  components() |> 
  filter(Purpose == "Holiday") |> 
  autoplot()
```

```{r}
tasmania |> 
  model(classical_decomposition(Trips, type = "additive")) |>
  components() |> 
  filter(Purpose == "Holiday") |> 
  autoplot()

tasmania |> 
  model(classical_decomposition(Trips, type = "additive")) |>
  components() |> 
  filter(Purpose == "Business") |> 
  autoplot()

tasmania |> 
  model(classical_decomposition(Trips, type = "additive")) |>
  components() |> 
  filter(Purpose == "Visiting") |> 
  autoplot()

tasmania |> 
  model(classical_decomposition(Trips, type = "additive")) |>
  components() |> 
  filter(Purpose == "Other") |> 
  autoplot()
```

```{r}
aus_production |> 
  autoplot(Gas)
aus_production |> 
  model(classical_decomposition(Gas, type = "multiplicative")) |> 
  components() |> 
  autoplot()
```

La función `model()` sirve para ajustar uno o más modelos a la(s) serie(s) de tiempo. Nos devuelve una tabla de modelos (`mable`).

```{r}
tasmania_comp <- tasmania |> 
  model(
    dcmp_clasica = classical_decomposition(Trips)
  ) |> 
  components()

tasmania_comp

tasmania_comp |> 
  autoplot()
```

```{r}
tasmania_comp |> 
  filter(Purpose == "Holiday") |> 
  ggplot(aes(x = Quarter, y = Trips)) +
  geom_line(color = "grey", size = 2) +
  geom_line(aes(y = season_adjust), color = "dodgerblue", size = 2)
```

```{r}
aus_production |> 
  model(STL(Gas, robust = TRUE)) |> 
  components() |> 
  ggplot(aes(x = Quarter, y = Gas)) +
  geom_line(color = "grey", size = 1) +
  geom_line(aes(y = trend), color = "firebrick", size = 1)

aus_production |> 
  model(STL(Gas, robust = TRUE)) |> 
  components() |> 
  ggplot(aes(x = Quarter, y = Gas)) +
  geom_line(color = "grey", size = 1) +
  geom_line(aes(y = season_adjust), color = "dodgerblue", size = 1)
```

## Descomposicion STL

```{r}
tasmania |>
  filter(Purpose == "Holiday") |>
  model(
    STL(Trips ~ trend(window = 11) + season(window = "periodic"), robust = TRUE)
        ) |>
      components() |>
      autoplot()
```

### Graficas

Grafica de tiempo

```{r}
aus_production |>
  autoplot(Gas)

```

Graficas estacionales

```{r}
aus_production |>
  gg_season(Gas) #estacionalidad a lo largo de los años
```

Grafica de subseries

```{r}
aus_production |>
  gg_subseries(Gas)
```

```{r}
aus_production |>
  gg_tsdisplay(Gas)
```

Ingenuo estacional - Repites por estacionalidad el valor hacia el futuro

Metodo ingenuo: Toma el ultimo valor para todo lo que sigue

Modelo de la media - Simplemente sacas la media y lo colocas en todos los dias que siguen

Drift (Deriva) - Toma primer y ultimo valor y traza una linea recta

### Benchmark models

```{r}
gas_fit <- aus_production |>
  model(
    media = MEAN(Gas),
    naive = NAIVE(Gas),
    seasonal_naive = SNAIVE(Gas),
    drift = NAIVE(Gas ~ drift())
  )

gas_fit
```

```{r}
gas_aug <- gas_fit |>
  augment()
gas_aug

gas_aug |>
  autoplot(.innov) +
  facet_wrap(vars(.model), scale = "free_y") +
  theme(legend.position = "none")

gas_aug |>
  group_by_key() |>
  as_tibble() |>
  summarise(media = mean(.resid, na.rm = TRUE))
```

```{r}
#| warning: FALSE
gas_fit |>
  select(naive) |>
  gg_tsresiduals()
```

1.  No autocorrelacion: Relacion de lo actual depende de lo de antes.
2.  Media cero:
3.  Varianza constante
4.  Distr. normal

```{r}
#| warning: false
gas_fit |>
  select(seasonal_naive) |>
  gg_tsresiduals()
```

**Test de Box-Pierce**

T = Total de periodos $r_k$ = k-esimo coeficiente de correlacion m = periodo estacional

$$
Q = T \sum_{k=1}^h r_k^2
$$ Se sugiere utilizar h=10 sin estacionalidad, h=2\*m con estacionalidad h \<= $\frac{T}{5}$

Si Q=0, no hay correlacion, Ruido blanco

Si Q diferente de 0, Autocorrelacion

**Test de Ljung-Box** $$
Q = T(T+2) \sum_{k=1}^{h} (T-k)^{-1} \cdot r_k^2
$$ P-value: Probabilidad exacta de cometer un error tipo I(Falso positivo) $\alpha$ = Nivel de significacncia (Nivel maximo para tolerar de error) $1-\alpha$ = Nivel de confianza

p-value \< $\alpha$ Rechazo $H_0$ p-value \> $\alpha$ No rechazo $H_0$

Si rechazo hipotesis nula, significativamente existe correlacion

```{r}
gas_aug |>
  features(.innov, box_pierce, lag = 8)
```

```{r}
gas_fit |> 
  forecast(h = "2 years") |> 
  autoplot(aus_production) +
  facet_wrap(vars(.model), scales = "free_y")
```

```{r}
gas_fit2 <- aus_production |>
  model(
    stlf = decomposition_model(
      #especificar la descomposición
      STL(log(Gas) ~ season(window = "periodic"), robust = TRUE),
      #especificamos el modelo para la estacionalidad
      SNAIVE(season_year),
      RW(season_adjust ~ drift())
      ),
    stlf2 = decomposition_model(
      #especificar la descomposición
      STL(log(Gas) ~ season(window = "periodic"), robust = TRUE),
      #Si no especifica como modelar la estacionalidad, se toma SNAIVE por default
      NAIVE(season_adjust)
      )
    )
gas_fit2
```

```{r}
#| Warning = false
gas_fit2 |>
  select(stlf) |>
  gg_tsresiduals()

gas_fit2 |>
  select(stlf2) |>
  gg_tsresiduals()

gas_fit2 |>
  augment() |>
  features(.innov, ljung_box, lag = 8)

```

```{r}
gas_fit2 |> 
  forecast(h = "5 years") |> 
  autoplot(aus_production, level = NULL)
```

```{r}
gas_fit2 <- gas_train |> 
  model(
    stlf = decomposition_model(
      # especificar la descomposición
      STL(log(Gas) ~ season(window = "periodic"), robust = TRUE),
      # especificamos el modelo para la estacionalidad
      SNAIVE(season_year),
      RW(season_adjust ~ drift())
    ),
    stlf2 = decomposition_model(
      # especificar la descomposición
      STL(log(Gas) ~ season(window = "periodic"), robust = TRUE),
      # Si no se especifica cómo modelar la estacionalidad, se toma SNAIVE por default
      NAIVE(season_adjust)
    )
  )

gas_fit2

gas_fit2 |> 
  augment() |> 
  features(.innov, ljung_box, lag = 8)
```

Errores dependientes de escalas:

MAE = mean$|e_k|$ RMSE = $\sqrt{mean(e_k^2)}$

Errores Porcentuales: MAPE = $mean(|p_k|)$ = $\frac{|y_k - y^l_k|}{y_k}$

Errores escalados:

-   Para series no estacionales

-   Para series estacionales

MASE = mean$|q_j|$ RMSSE = $\sqrt{mean(q_j^2)}$

```{r}
gas_fcst <- gas_fit2 |> 
  forecast(h = "5 years") 

gas_fcst

gas_fcst |> 
  autoplot(aus_production, size = 1, level = NULL)

gas_fcst |> 
  autoplot(aus_production, size = 1) +
  facet_wrap(vars(.model), scales = "free_y", ncol = 1) +
  theme(legend.position = "none")
```

Métricas de error en el entrenamiento:

```{r}
accuracy(gas_fit2)
```

Error de pronóstico

```{r}
gas_fcst |> 
  accuracy(aus_production)
```

## Combinación de modelos

```{r}
gas_fit3 <- gas_fit2 |> 
  mutate(
    stl_combinado = (stlf + stlf2)/2
  )
gas_fit3
```

```{r}
gas_fit3 |> 
  augment() |> 
  features(.innov, ljung_box, lag = 8)

gas_fcst3 <- gas_fit3 |> 
  forecast(h = "5 years") 

gas_fcst3 |> 
  autoplot(aus_production, level = NULL)

gas_fcst3 |> 
  autoplot(aus_production) +
  facet_wrap(vars(.model), scales = "free_y", ncol = 1) +
  theme(legend.position = "none")

gas_fcst3 |> 
  accuracy(aus_production)
```

```{r}
gas_fit4 <- gas_train |> 
  model(
    stl_combi1 = combination_model(
      decomposition_model(
       STL(log(Gas) ~ season(window = "periodic"), robust = TRUE),
       RW(season_adjust ~ drift())
    ),
      decomposition_model(
       STL(log(Gas) ~ season(window = "periodic"), robust = TRUE),
       NAIVE(season_adjust)
    )
    ),
    stl_combi_weights = combination_weighted(
      decomposition_model(
       STL(log(Gas) ~ season(window = "periodic"), robust = TRUE),
       RW(season_adjust ~ drift())
    ),
      decomposition_model(
       STL(log(Gas) ~ season(window = "periodic"), robust = TRUE),
       NAIVE(season_adjust)
    ), weights = c(0.9, 1.1)
    ),
    combinado_sin_stl = combination_model(
      SNAIVE(log(Gas)),
      RW(log(Gas) ~ drift())
    )
    
  )
gas_fit4

accuracy(gas_fit4) |> 
  arrange(MAPE)
```

```{r}
gas_fcst4 <- gas_fit4 |> 
  forecast(h = "5 years")

gas_fcst4 |> 
  autoplot(aus_production|> filter_index("1990 Q1" ~ .))

gas_fcst4 |> 
  accuracy(aus_production) |> 
  arrange(MAPE)
```

```{r}
aus_production |>
  autoplot(log(Gas))
```

# Media ponderada

### Suavisacion exponencial

$$ y_{T+1} = \alpha y_T + \alpha (1-\alpha) y_{T-1} + \alpha (1-\alpha)^2 y_{T-2} + \cdots $$ $$ 0 < \alpha < 1$$

Entre un alfa mas chica mas nos va a importar lo que ocurrio en el pasado. Entre alfa mas grande, nos va a importar menos el pasado y mas lo actual.

-   Ecuacion de pronostico $$y_{t+h|t} = L_t$$

<!-- -->

-   Ecuacion de nivel $$L_t = \alpha y_t + (1 - \alpha)L_{t-1}$$ Modelo busca ser multiplicativo cuando la varianza va creciendo, sin embargo con una transformacion logaritmica, multiplicacion dentro de un log se suma log_1 + log_2 + ..., teniendo el mismo modelo aditivo pero con transformacion logaritmica.

### Modelo de tendencia lineal de Holt

-   Nivel

-   Tendencia

-   Pronostico

$$
\begin{align*}
L_t &= \alpha y_t + (1 - \alpha)(L_{t-1} + T_{t-1}) \\
T_t &= \beta (L_t - L_{t-1}) + (1 - \beta) T_{t-1} \\
y_{t+h|t} &= L_t + hT_t
\end{align*}
$$

### Metodos de tendencia amortiguada

-   Nivel

-   Tendencia

-   Pronostico

$$
\begin{align*}
L_t &= \alpha y_t + (1 - \alpha)(L_{t-1} + \phi T_{t-1}) \\
T_t &= \beta (L_t - L_{t-1}) + (1 - \beta) \phi T_{t-1} \\
y_{t+h|t} &= L_t + \phi^h T_t
\end{align*}
$$

### Modelo de Holt-Winters

-   Nivel

-   Tendencia

-   Estacionalidad

-   Pronostico

**Sumativa**

$$
\begin{align*}L_t &= \alpha (y_t - S_{t-m}) + (1 - \alpha)(L_{t-1} + T_{t-1}) \\T_t &= \beta (L_t - L_{t-1}) + (1 - \beta) T_{t-1} \\S_t &= \gamma (y_t - L_t) + (1 - \gamma) S_{t-m} \\y_{t+h|t} &= L_t + hT_t + S_{t-m+h}\end{align*}
$$

------------------------------------------------------------------------

**Multiplicativa** $$
\begin{align*}
L_t &= \alpha \left(\frac{y_t}{S_{t-m}}\right) + (1 - \alpha)(L_{t-1} + T_{t-1}) \\
T_t &= \beta (L_t - L_{t-1}) + (1 - \beta) T_{t-1} \\
S_t &= \gamma \left(\frac{y_t}{L_t}\right) + (1 - \gamma) S_{t-m} \\
y_{t+h|t} &= (L_t + hT_t) \cdot S_{t-m+h}
\end{align*}
$$

Estacionariedad es cuando la media y la varianza es constante en los distintos puntos de la serie de tiempo.

Estabilizar la media -\> Diferienciacion $(\Delta Y_t = Y_t - Y_{t-1})$

Diferienciacion estacional $\Delta Y_t^m = Y_t - Y{t-m}$

Estabilizar la varianza -\> Box-cox

$$
B Y_t = Y_t-1
\\
Y_t^I = (1-B)Y_t
\\
Y_t^II = (1-B)^2Y_t
$$

Si el p-value es mayor a 0.5, la serie de tiempo si seria estacionaria.

## AR(p)

$AR(1) : T_t = \phi_0 + \phi Y_{t-1} + \epsilon_t$ - Caminata aleatoria

## MA(p)

$y_t = \theta_0 + \theta_1 \epsilon_{t-1} + \theta_2 \epsilon_{t-2} ...$

Modelamos la autocorrelacion que poseen los datos, si no existe autocorrelacion no seran buenos modelos.

Lo mejor es juntarlos para los modelos ARIMA

## ARIMA

$y'_t = c + \phi_1y'_t + ... + \phi py'{t-p} + \theta_1 \epsilon{t-1} + ... + \theta q \epsilon{t-q} + \epsilon_t$

-   AR = p (autorregresivo), La autocorrelacion parcial (que tantos)
-   I = d (estacionaria) - Se utiliza uniroot_ndiffs
-   MA =q (media movil), La autocorrelacion (que tantos)

## Autocorrelacion Parcial

-   Se centra únicamente en la relación directa entre el valor actual y el rezago específico, excluyendo cualquier influencia mediada por rezagos intermedios.

$AIC$

$AIC_c$

$BIC$

### Multicolinealidad perfecta

$$
\lambda_1X_1 + \lambda_2 X_2 + ...+ \lambda_k X_k = 0
$$

Tiene una relacion una variable con otra (ejemplo, variable multiplicado por escalar representa otra, tiene que ser relacion lineal).

## Regresion armonica dinamica

Utiliza Furiel (senos y cosenos) para predecir la estacionalidad.
